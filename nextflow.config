/*
This config file contains all the profiles and allows switching between the ap15 (nf-cfmedip) and bam_to_counts workflows
*/


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled         = true
        docker.envWhitelist    = "DATABRICKS_HOST,DATABRICKS_HTTP_PATH"
        docker.runOptions      = '-u 0:0'
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    ap15 { includeConfig 'conf/ap15.config' }
    bam_to_counts { includeConfig 'conf/bam_to_counts.config' }
    local {
        params.max_cpus   = 2
        params.max_memory = '16.GB'
        params.max_time   = '6.h'
    }
    gitlab      {
        params.max_cpus   = 2
        params.max_memory = '6.GB'
        params.max_time   = '1.h'
    }
    dev {
        params.databricks_env_name = "dev"
        env.DATABRICKS_HOST = "adela-oap-research-dev.cloud.databricks.com"
    }
    staging {
        params.databricks_env_name = "staging"
        env.DATABRICKS_HOST = "adela-oap-research-staging.cloud.databricks.com"
    }
    prod {
        params.databricks_env_name = "prod"
        env.DATABRICKS_HOST = "adela-oap-research-prod.cloud.databricks.com"
    }
    // the validation environments use a "fake" env because we don't want any real
    // databricks credentials in those environments
    no_databricks {
        params.databricks_env_name = "fake"
    }
}

// settings to prevent error: "HTTP/1.1 header parser received no bytes"
wave.retryPolicy.delay = '500ms'
wave.retryPolicy.maxAttempts = 10

manifest {
    name            = 'nf-cfmedip'
    author          = 'Adela, Inc.'
    homePage        = 'https://gitlab.com/adelabio/data-science/nf-cfmedip'
    description     = 'cfMeDIP peak-calling and differential analysis pipeline.'
    mainScript      = 'main_ap15.nf'
    nextflowVersion = '!>=21.10.3'
}

// separate this out from the above manifest block to make it easier to extract via bash
manifest.version = '4.3.0'

nextflow.enable.strict = true

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
