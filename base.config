/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-cfmedip Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

// unlimited queue size
executor.queueSize = 1000000

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = 'retry'
    maxRetries    = 4
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_single_long_runtime {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low_2cpus_32G_16h {
        cpus   = { check_max( 2      * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_low_8cpus_48G_16h {
        cpus   = { check_max( 8      * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_2cpus_64G_16h {
        cpus   = { check_max( 2      * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_16cpus_72G_16h {
        cpus   = { check_max( 16     * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_32cpus_128G_16h {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
        withLabel:process_high_64cpus_256G_24h {
        cpus   = { check_max( 64     * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_72cpus_128G_16h {
        cpus   = { check_max( 72     * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 36.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_128cpus_256G_24h {
        cpus   = { check_max( 128    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 256.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}
